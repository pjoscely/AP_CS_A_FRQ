#BlueJ class context
comment0.target=FrogSimulation
comment1.params=dist\ numHops
comment1.target=FrogSimulation(int,\ int)
comment1.text=\ Constructs\ a\ FrogSimulation\ where\ dist\ is\ the\ distance,\ in\ inches,\ from\ the\ starting\n\ position\ to\ the\ goal,\ and\ numHops\ is\ the\ maximum\ number\ of\ hops\ allowed\ to\ reach\ the\ goal.\n\ Precondition\:\ dist\ >\ 0;\ numHops\ >\ 0\n
comment2.params=
comment2.target=int\ hopDistance()
comment2.text=\ Returns\ an\ integer\ representing\ the\ distance,\ in\ inches,\ \nto\ be\ moved\ when\ the\ frog\ hops.
comment3.params=
comment3.target=boolean\ simulate()
comment3.text=\ Part\ (a)\ \n\ Write\ the\ simulate\ method,\ which\ simulates\ the\ frog\ attempting\ to\ hop\ in\ a\ straight\ line\ \n\ to\ a\ goal\ from\ the\ frog's\ starting\ position\ of\ 0\ within\ a\ maximum\ number\ of\ hops.\ \n\ The\ method\ returns\ true\ if\ the\ frog\ successfully\ reached\ the\ goal\ within\ the\ maximum\ number\ of\ hops;\ \n\ otherwise,\ the\ method\ returns\ false.\n\ The\ FrogSimulation\ class\ provides\ a\ method\ called\ hopDistance\ that\ returns\ an\ integer\ \n\ representing\ the\ distance\ (positive\ or\ negative)\ to\ be\ moved\ when\ the\ frog\ hops.\ \n\ A\ positive\ distance\ represents\ a\ move\ toward\ the\ goal.\ A\ negative\ distance\ represents\ a\ move\ away\ from\ the\ goal.\ \n\ The\ returned\ distance\ may\ vary\ from\ call\ to\ call.\ Each\ time\ the\ frog\ hops,\ its\ position\ is\ adjusted\ by\ the\ \n\ value\ returned\ by\ a\ call\ to\ the\ hopDistance\ method.\n\ The\ frog\ hops\ until\ one\ of\ the\ following\ conditions\ becomes\ true\:\n\ \ \ The\ frog\ has\ reached\ or\ passed\ the\ goal.\n\ \ \ The\ frog\ has\ reached\ a\ negative\ position.\n\ \ \ The\ frog\ has\ taken\ the\ maximum\ number\ of\ hops\ without\ reaching\ the\ goal.\n\ The\ following\ example\ shows\ a\ declaration\ of\ a\ FrogSimulation\ object\ for\ which\ the\ goal\ distance\ \n\ is\ 24\ inches\ and\ the\ maximum\ number\ of\ hops\ is\ 5.\ The\ table\ shows\ some\ possible\ outcomes\ \n\ of\ calling\ the\ simulate\ method.\n\n\ FrogSimulation\ sim\ \=\ new\ FrogSimulation(24,\ 5);\n\ Values\ returned\ by\ hopDistance()\ of\ frog,\ Final\ Position\ Return\ value\ of\ sim.simulate()\n\ \n\ Example\ 1\n\ 5,\ 7,-2,\ 8,\ 6\ Final\ \=\ \ 24\ true\n\ \n\ Example\ 2\ \n\ 6,\ 7,\ 6,\ 6\ Final\ \=\ 25\ true\n\n\ Example\ 3\n\ 6,\ -6,\ 31\ Final\ \=\ 31\ true\n\ \n\ Example\ 4\n\ 4,\ 2,\ -8\ Final\ \=\ -2\ false\n\n\ Example\ 5\n\ 5,\ 4,\ 2,\ 4,\ 3\ Final\ \=\ 18\ false\n\ \ \nClass\ information\ for\ this\ question\npublic\ class\ FrogSimulation\nprivate\ int\ goalDistance\nprivate\ int\ maxHops\nprivate\ int\ hopDistance()\npublic\ boolean\ simulate()\npublic\ double\ runSimulations(int\ num)\n\ \n\ \ \ \n\ Simulates\ a\ frog\ attempting\ to\ reach\ the\ goal\ as\ described\ in\ part\ (a).\n\ Returns\ true\ if\ the\ frog\ successfully\ reached\ or\ passed\ the\ goal\ during\ \n\ the\ simulation;\ *\ false\ otherwise.\n
comment4.params=num
comment4.target=double\ runSimulations(int)
comment4.text=\ Runs\ num\ simulations\ and\ returns\ the\ proportion\ of\ simulations\ \n\ in\ which\ the\ frog\n\ successfully\ reached\ or\ passed\ the\ goal.\nPrecondition\:\ num\ >\ 0
numComments=5
